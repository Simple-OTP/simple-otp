// Mocks generated by Mockito 5.4.4 from annotations
// in simple_otp/test/app_launch_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;
import 'dart:io' as _i2;
import 'dart:ui' as _i7;

import 'package:cryptography/cryptography.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i5;
import 'package:simple_otp/provider/configuration.dart' as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeFile_0 extends _i1.SmartFake implements _i2.File {
  _FakeFile_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSecretKey_1 extends _i1.SmartFake implements _i3.SecretKey {
  _FakeSecretKey_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [Configuration].
///
/// See the documentation for Mockito's code generation for more information.
class MockConfiguration extends _i1.Mock implements _i4.Configuration {
  MockConfiguration() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get internalDirectoryPath => (super.noSuchMethod(
        Invocation.getter(#internalDirectoryPath),
        returnValue: _i5.dummyValue<String>(
          this,
          Invocation.getter(#internalDirectoryPath),
        ),
      ) as String);

  @override
  bool get requirePassword => (super.noSuchMethod(
        Invocation.getter(#requirePassword),
        returnValue: false,
      ) as bool);

  @override
  set requirePassword(bool? value) => super.noSuchMethod(
        Invocation.setter(
          #requirePassword,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);

  @override
  bool doesDatabaseExist() => (super.noSuchMethod(
        Invocation.method(
          #doesDatabaseExist,
          [],
        ),
        returnValue: false,
      ) as bool);

  @override
  _i2.File getDatabaseFile() => (super.noSuchMethod(
        Invocation.method(
          #getDatabaseFile,
          [],
        ),
        returnValue: _FakeFile_0(
          this,
          Invocation.method(
            #getDatabaseFile,
            [],
          ),
        ),
      ) as _i2.File);

  @override
  List<int> nonce() => (super.noSuchMethod(
        Invocation.method(
          #nonce,
          [],
        ),
        returnValue: <int>[],
      ) as List<int>);

  @override
  void toggleRequirePassword() => super.noSuchMethod(
        Invocation.method(
          #toggleRequirePassword,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i6.Future<_i3.SecretKey> generateFromPassword(String? password) =>
      (super.noSuchMethod(
        Invocation.method(
          #generateFromPassword,
          [password],
        ),
        returnValue: _i6.Future<_i3.SecretKey>.value(_FakeSecretKey_1(
          this,
          Invocation.method(
            #generateFromPassword,
            [password],
          ),
        )),
      ) as _i6.Future<_i3.SecretKey>);

  @override
  void addListener(_i7.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(_i7.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
